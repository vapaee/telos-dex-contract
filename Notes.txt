https://github.com/telosnetwork/telos-decide/tree/master/contracts/decide

--- TODO ---
+ crear la tabla blacklist {
    id,
    symbol_code,
    contract,
    ballot
  }
+ crear el singleton config {
    maker_fee,
    taker_fee,
    prune
  }
https://github.com/telosnetwork/telos-decide/blob/master/contracts/decide/include/decide.hpp#L312


+ crear la tabla delmarkets {
    id,     // id del market
    name,   // xxx.yyy
  }


  
+ Q: como hago para detectar que no se puede realizar una orden para un market determinado mientras un token está siendo evaluado (ballot) ?
  A: puedo preguntar si alguno de los tokens involucrados está en blacklist
+ Hay que crear un indice nuevo en ballot para poder identificar rápido cuales son los ballots que están abiertos.  
+ Hay que sacar el property delisttoken
+ Crear una funcion que determine si un token está en lista negra o está siendo evaluado (ballot) actualmente.
+ hay que adaptar el addtoken y updatetoken para que no permita operar si el token no está abilitado (con la función del punto anterior)
+ Si alguien intenta hacer trading de un token que no está habiltado para trading debe explotar
+ la action order debería cancelar si uno de los tokens involucrados está en blacklist
- al crear un ballot. Subfunciones:
  - "bantoken"
    - si el token está en whitelist, no puede ser baneado
    - hay que agregar el token en blacklist
    

- reaccionar a la resolución de un ballot.
  - verificar que existe en nuestra lista.
  - deendiendo de que sea ejecutar una u otra sub función
  - "savetoken"
    - afirmativo:
      - hay que agregar el token a la lista blanca
  - "bantoken"
    - afirmativo:
      - sacarlo de la lista de tokens
      - averiaguar en cuantos markets participa y ponerlos en delmarkets
    - negativo:
      - sacarlo de la blacklist
  - "makerfee"
    - afirmativo: solo cambiar el valor en config y nada más
  - "takerfee"
    - afirmativo: Idem anterior
  - "setcurrency"
    - afirmativo: sólo se le cambia el parámetro currency al token y listo
    - negativo:
      - solo si antes si era currency y se lo sacan, hay que setearlo en false y eliminar todos los markets a los que pertenece (delmarkets)
  - "historyprune"
    - afirmativo: sólo se le cambia el parámetro prune al config
- función para mantenimiento: es una func que se debería ejecutar una o dos veces cada tanto
  - No debe dar error nunca!!
  - Debe fijarse si hay un market en la delmarkets table. Si encuentra, debe:
    - borrar entradas del history(market-id)
    - cancelar ordenes para ese market de sellorders(market-id)
  - debe fijarse si la fecha de config.prune es posterior a la última fecha del historial de eventos y borrarlo si lo es
  - Idem anterior, pero para el historial de un Market dado (por parámetro)








--- token ---

- set token as currency: allow people to create markets with this token as currency
  - que token: symbol


-- black & white list --

- banning a token: the token will be complete banned from the DEX. Can't be relisting unless restored by voting. While the voting is in process, the token is immediately temporarily suspended from trading.
  - que token: symbol, contract

- saving a token: The token will be white listed which meeans it can't be banned. It can be unsaved but this process is longger than banning and the token can still be traded.
  - que token: symbol, contract



--- gonfig ---

- maker fees: apply percent to taker money and give to the account of the UI maker is using
  - cuanto: double

- taker fees: apply percent to maker money and give to the account of the UI taker is using
  - cuanto: double

- history pruning: to release RAM people can decide to prune the oldest history entries
  - prune hasta que fecha: date


--------

- delisting token: is not allowed te be traded!! but is not banned, can be shown (this is up to the UI). This can be undone by voting.
  - que token: symbol

